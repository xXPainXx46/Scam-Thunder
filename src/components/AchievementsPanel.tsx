import { useState } from 'react';

interface AchievementsPanelProps {
  gameHook: any;
}

export const AchievementsPanel: React.FC<AchievementsPanelProps> = ({ gameHook }) => {
  const { gameState, achievements, formatNumber } = gameHook;
  const [filter, setFilter] = useState<'all' | 'unlocked' | 'locked' | 'combat' | 'economic' | 'veteran'>('all');

  const unlockedAchievements = achievements.filter((achievement: any) =>
    gameState.unlockedAchievements.includes(achievement.id)
  );

  const lockedAchievements = achievements.filter((achievement: any) =>
    !gameState.unlockedAchievements.includes(achievement.id)
  );

  const getAchievementCategory = (achievement: any): string => {
    if (achievement.requirement?.type === 'clicks' || achievement.name.includes('–∞—Ç–∞–∫') || achievement.name.includes('—É—Ä–æ–Ω')) return 'combat';
    if (achievement.requirement?.type === 'rubles' || achievement.requirement?.type === 'goldenEagles' || achievement.name.includes('–¥–æ–Ω–∞—Ç') || achievement.name.includes('—Ä—É–±–ª')) return 'economic';
    if (achievement.requirement?.type === 'playTime' || achievement.requirement?.type === 'prestige' || achievement.name.includes('–∑–≤–∞–Ω–∏–µ') || achievement.name.includes('—á–∞—Å')) return 'veteran';
    return 'combat';
  };

  const getFilteredAchievements = () => {
    switch (filter) {
      case 'unlocked':
        return unlockedAchievements;
      case 'locked':
        return lockedAchievements;
      case 'combat':
        return achievements.filter((a: any) => getAchievementCategory(a) === 'combat');
      case 'economic':
        return achievements.filter((a: any) => getAchievementCategory(a) === 'economic');
      case 'veteran':
        return achievements.filter((a: any) => getAchievementCategory(a) === 'veteran');
      default:
        return achievements;
    }
  };

  const getProgressText = (achievement: any): string => {
    const req = achievement.requirement;
    let current = 0;
    let target = req.value;

    switch (req.type) {
      case 'clicks':
        current = gameState.totalClicks;
        break;
      case 'rubles':
        current = gameState.totalRublesEarned;
        break;
      case 'goldenEagles':
        current = gameState.totalGoldenEaglesEarned;
        break;
      case 'prestige':
        current = gameState.prestige;
        break;
      case 'playTime':
        current = gameState.playTime;
        target = req.value;
        return `${Math.floor(current / 1000)}—Å / ${Math.floor(target / 1000)}—Å`;
      case 'upgrades':
        if (req.upgradeId) {
          current = gameState.upgrades[req.upgradeId] || 0;
        }
        break;
    }

    return `${formatNumber(Math.min(current, target))} / ${formatNumber(target)}`;
  };

  const getProgressPercentage = (achievement: any): number => {
    if (gameState.unlockedAchievements.includes(achievement.id)) return 100;

    const req = achievement.requirement;
    let current = 0;
    let target = req.value;

    switch (req.type) {
      case 'clicks':
        current = gameState.totalClicks;
        break;
      case 'rubles':
        current = gameState.totalRublesEarned;
        break;
      case 'goldenEagles':
        current = gameState.totalGoldenEaglesEarned;
        break;
      case 'prestige':
        current = gameState.prestige;
        break;
      case 'playTime':
        current = gameState.playTime;
        break;
      case 'upgrades':
        if (req.upgradeId) {
          current = gameState.upgrades[req.upgradeId] || 0;
        }
        break;
    }

    return Math.min(100, (current / target) * 100);
  };

  const getRewardText = (achievement: any): string => {
    const rewards = [];
    if (achievement.reward.rubles) {
      rewards.push(`${formatNumber(achievement.reward.rubles)} —Ä—É–±–ª–µ–π`);
    }
    if (achievement.reward.goldenEagles) {
      rewards.push(`${formatNumber(achievement.reward.goldenEagles)} –æ—Ä–ª–æ–≤`);
    }
    if (achievement.reward.clickPower) {
      rewards.push(`+${achievement.reward.clickPower} —Å–∏–ª–∞ –∫–ª–∏–∫–∞`);
    }
    if (achievement.reward.multiplier) {
      rewards.push(`x${achievement.reward.multiplier} –º–Ω–æ–∂–∏—Ç–µ–ª—å`);
    }
    return rewards.join(', ');
  };

  const getMedalTier = (requirement: any): { color: string; tier: string; icon: string } => {
    const value = requirement?.value || 100;
    if (value <= 100) return { color: 'var(--wt-bronze)', tier: '–ë—Ä–æ–Ω–∑–∞', icon: 'ü•â' };
    if (value <= 1000) return { color: 'var(--wt-text-primary)', tier: '–°–µ—Ä–µ–±—Ä–æ', icon: 'ü•à' };
    if (value <= 10000) return { color: 'var(--wt-gold)', tier: '–ó–æ–ª–æ—Ç–æ', icon: 'ü•á' };
    if (value <= 100000) return { color: 'var(--wt-red-warning)', tier: '–ü–ª–∞—Ç–∏–Ω–∞', icon: 'üíé' };
    return { color: 'var(--wt-blue-info)', tier: '–õ–µ–≥–µ–Ω–¥–∞', icon: 'üëë' };
  };

  const filteredAchievements = getFilteredAchievements();

  return (
    <div className="max-w-7xl mx-auto">
      {/* War Thunder Achievement Header */}
      <div className="wt-panel p-6 mb-6">
        <div className="wt-panel-header text-center">
          üèÖ –ú–ï–î–ê–õ–ò –§–ò–ù–ê–ù–°–û–í–û–ì–û –ö–†–ê–•–ê
        </div>
        
        <div className="mt-4 text-center">
          <h2 className="text-3xl font-bold mb-2 wt-text-glow" style={{ color: 'var(--wt-gold)' }}>
            WAR THUNDER: –ö–ù–ò–ì–ê –†–ï–ö–û–†–î–û–í –ë–ê–ù–ö–†–û–¢–°–¢–í–ê
          </h2>
          <p className="wt-text-premium mb-4">
            üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ –ø—É—Ç–∏ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –∫—Ä–∞—Ö—É üéñÔ∏è
          </p>
          <div className="text-sm" style={{ color: 'var(--wt-text-secondary)' }}>
            "–ö–∞–∂–¥–∞—è –º–µ–¥–∞–ª—å - —ç—Ç–æ —à–∞–≥ –∫ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É" - Gaijin Philosophy¬©
          </div>
        </div>
      </div>

      {/* Achievement Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div className="wt-panel p-4 text-center">
          <div className="text-3xl font-bold mb-2" style={{ color: 'var(--wt-military-green)' }}>
            {unlockedAchievements.length}
          </div>
          <div style={{ color: 'var(--wt-text-secondary)' }}>üèÖ –ü–æ–ª—É—á–µ–Ω–æ –º–µ–¥–∞–ª–µ–π</div>
        </div>
        <div className="wt-panel p-4 text-center">
          <div className="text-3xl font-bold mb-2" style={{ color: 'var(--wt-blue-info)' }}>
            {achievements.length}
          </div>
          <div style={{ color: 'var(--wt-text-secondary)' }}>üéñÔ∏è –í—Å–µ–≥–æ –º–µ–¥–∞–ª–µ–π</div>
        </div>
        <div className="wt-panel p-4 text-center">
          <div className="text-3xl font-bold mb-2 wt-text-premium">
            {((unlockedAchievements.length / achievements.length) * 100).toFixed(1)}%
          </div>
          <div style={{ color: 'var(--wt-text-secondary)' }}>üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–æ—Ä–µ–Ω–∏—è</div>
        </div>
        <div className="wt-panel p-4 text-center">
          <div className="text-3xl font-bold mb-2" style={{ color: 'var(--wt-gold)' }}>
            BR {Math.floor(unlockedAchievements.length / 10 + 1)}.0
          </div>
          <div style={{ color: 'var(--wt-text-secondary)' }}>üéØ Battle Rating –±–∞–Ω–∫—Ä–æ—Ç–∞</div>
        </div>
      </div>

      {/* War Thunder Style Category Filters */}
      <div className="wt-panel p-4 mb-6">
        <div className="flex flex-wrap justify-center gap-2 mb-4">
          {[
            { id: 'all', label: 'üèÜ –í—Å–µ –º–µ–¥–∞–ª–∏', count: achievements.length, desc: '–ü–æ–ª–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞' },
            { id: 'unlocked', label: '‚úÖ –ü–æ–ª—É—á–µ–Ω–æ', count: unlockedAchievements.length, desc: '–ó–∞—Å–ª—É–∂–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã' },
            { id: 'locked', label: 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', count: lockedAchievements.length, desc: '–ë—É–¥—É—â–∏–µ —Ü–µ–ª–∏' },
            { id: 'combat', label: '‚öîÔ∏è –ë–æ–µ–≤—ã–µ', count: achievements.filter((a: any) => getAchievementCategory(a) === 'combat').length, desc: '–ó–∞ –±–æ–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è' },
            { id: 'economic', label: 'üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ', count: achievements.filter((a: any) => getAchievementCategory(a) === 'economic').length, desc: '–ó–∞ —Ç—Ä–∞—Ç—É –¥–µ–Ω–µ–≥' },
            { id: 'veteran', label: 'üéñÔ∏è –í–µ—Ç–µ—Ä–∞–Ω—Å–∫–∏–µ', count: achievements.filter((a: any) => getAchievementCategory(a) === 'veteran').length, desc: '–ó–∞ –≤–µ—Ä–Ω–æ—Å—Ç—å –∏–≥—Ä–µ' }
          ].map(button => (
            <button
              key={button.id}
              onClick={() => setFilter(button.id as any)}
              className={`wt-nav-tab px-4 py-2 transition-all duration-200 ${
                filter === button.id ? 'active' : ''
              }`}
              title={button.desc}
            >
              {button.label} ({button.count})
            </button>
          ))}
        </div>
      </div>

      {/* War Thunder Style Achievement Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
        {filteredAchievements.map((achievement: any) => {
          const isUnlocked = gameState.unlockedAchievements.includes(achievement.id);
          const progress = getProgressPercentage(achievement);
          const medalTier = getMedalTier(achievement.requirement);

          return (
            <div
              key={achievement.id}
              className={`wt-vehicle-card p-4 transition-all duration-300 hover:scale-105 ${
                isUnlocked ? 'border-2' : ''
              }`}
              style={{
                borderColor: isUnlocked ? 'var(--wt-gold)' : 'var(--wt-border)',
                background: isUnlocked 
                  ? 'linear-gradient(145deg, var(--wt-panel-bg), #3d2914)' 
                  : 'var(--wt-panel-bg)',
                opacity: isUnlocked ? 1 : 0.7
              }}
            >
              {/* Medal Header */}
              <div className="flex justify-between items-start mb-3">
                <div className="flex items-center space-x-2">
                  <span className="text-2xl">
                    {isUnlocked ? medalTier.icon : 'üîí'}
                  </span>
                  <div className="wt-rank-badge text-xs" style={{ 
                    background: medalTier.color,
                    color: medalTier.color === 'var(--wt-gold)' ? 'black' : 'white'
                  }}>
                    {medalTier.tier}
                  </div>
                </div>
                {isUnlocked && (
                  <span className="text-xl" style={{ color: 'var(--wt-gold)' }}>‚ú®</span>
                )}
              </div>

              {/* Achievement Name */}
              <h3 className={`font-bold text-lg mb-2 ${
                isUnlocked ? 'wt-text-glow' : 'text-white/60'
              }`} style={{
                color: isUnlocked ? 'var(--wt-gold)' : 'var(--wt-text-secondary)'
              }}>
                {achievement.name}
              </h3>

              {/* Description */}
              <p className="text-sm mb-4" style={{ 
                color: isUnlocked ? 'var(--wt-text-primary)' : 'var(--wt-text-muted)',
                minHeight: '60px'
              }}>
                {achievement.description}
              </p>

              {/* Requirement Display */}
              <div className="wt-vehicle-card p-2 mb-3 text-xs">
                <div className="flex justify-between items-center">
                  <span style={{ color: 'var(--wt-text-secondary)' }}>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</span>
                  <span className="font-bold" style={{ 
                    color: isUnlocked ? 'var(--wt-military-green)' : 'var(--wt-text-primary)' 
                  }}>
                    {getProgressText(achievement)}
                  </span>
                </div>
                
                {!isUnlocked && progress > 0 && (
                  <div className="mt-1" style={{ color: 'var(--wt-blue-info)' }}>
                    –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress.toFixed(1)}%
                  </div>
                )}
              </div>

              {/* Progress Bar */}
              {!isUnlocked && (
                <div className="wt-progress-bar h-3 mb-3">
                  <div 
                    className="h-full transition-all duration-300"
                    style={{ 
                      width: `${progress}%`,
                      background: progress > 80 
                        ? 'linear-gradient(90deg, var(--wt-gold), var(--wt-bronze))'
                        : 'linear-gradient(90deg, var(--wt-blue-info), var(--wt-military-green))'
                    }}
                  />
                </div>
              )}

              {/* Status Badge and Reward */}
              <div className="space-y-2">
                {isUnlocked ? (
                  <div className="wt-premium-button text-sm py-2" style={{ borderRadius: '4px' }}>
                    üèÜ –ú–ï–î–ê–õ–¨ –ü–û–õ–£–ß–ï–ù–ê
                  </div>
                ) : progress > 0 ? (
                  <div className="wt-button text-sm py-2" style={{ borderRadius: '4px' }}>
                    üéØ –í –ü–†–û–¶–ï–°–°–ï
                  </div>
                ) : (
                  <div className="p-2 text-sm" style={{ 
                    background: 'var(--wt-panel-bg)',
                    border: '1px solid var(--wt-border)',
                    borderRadius: '4px',
                    color: 'var(--wt-text-muted)'
                  }}>
                    üîí –ù–ï –ù–ê–ß–ê–¢–û
                  </div>
                )}
                
                {/* Reward Display */}
                <div className="wt-vehicle-card p-2 text-xs">
                  <div style={{ color: 'var(--wt-text-secondary)' }} className="mb-1">
                    –ù–∞–≥—Ä–∞–¥–∞:
                  </div>
                  <div className="font-bold" style={{ 
                    color: isUnlocked ? 'var(--wt-gold)' : 'var(--wt-text-primary)' 
                  }}>
                    {getRewardText(achievement)}
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* No Achievements Message */}
      {filteredAchievements.length === 0 && (
        <div className="wt-panel p-8 text-center">
          <div className="text-6xl mb-4">üèÖ</div>
          <div className="text-xl font-bold mb-2" style={{ color: 'var(--wt-text-primary)' }}>
            –ú–µ–¥–∞–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </div>
          <div style={{ color: 'var(--wt-text-secondary)' }}>
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∏!
          </div>
        </div>
      )}

      {/* War Thunder Motivational Quote */}
      <div className="wt-notification p-4 mt-6">
        <div className="text-center">
          <div className="text-lg font-bold wt-text-premium mb-2">
            üí° –ú–£–î–†–û–°–¢–¨ WAR THUNDER
          </div>
          <div className="text-sm" style={{ color: 'var(--wt-text-secondary)' }}>
            "–ö–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É, –Ω–æ –∑–∞—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –º–µ–¥–∞–ª—å–∫–∏!"
            <br />
            <span className="wt-text-premium">- –§–∏–ª–æ—Å–æ—Ñ–∏—è Gaijin Entertainment¬©</span>
          </div>
        </div>
      </div>
    </div>
  );
};
